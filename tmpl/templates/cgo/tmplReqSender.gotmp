package main

import "C"
import (
	"encoding/json"
	"unsafe"
)

/* CUSTOM IMPORTS */

/* CODE */

//export PluginWrapper
func PluginWrapper(dst *byte, dstLen int, sendMetaJson *byte, sendMetaJsonLen int) uintptr {
	// 解析输入
	sendMetaJsonSlice := unsafe.Slice(sendMetaJson, sendMetaJsonLen)
	sendMeta := new(fuzzTypes.SendMeta)
	if err := json.Unmarshal(sendMetaJsonSlice, sendMeta); err != nil {
		return ^uintptr(0)
	}

	// 调用核心逻辑
	resp := /* FUN_NAME */(sendMeta)

	// 序列化
	respJson, err := json.Marshal(resp)
	if err != nil {
	    return ^uintptr(0)
	}

	// 计算需要的大小 (4字节长度 + 数据)
	needed := len(respJson)

	// 如果调用方给的缓冲区不足，直接返回需要的大小
	if dst == nil || dstLen < needed {
		return uintptr(needed)
	}

	// 写入到调用方提供的缓冲区
	buf := unsafe.Slice(dst, dstLen)
	copy(buf, respJson)

	// 返回实际写入的大小
	return uintptr(needed)
}

func main() {}
