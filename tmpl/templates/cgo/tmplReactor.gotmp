package main

import "C"
import (
	"encoding/json"
	"unsafe"
)

/* CUSTOM IMPORTS */

/* CODE */

//export PluginWrapper
func PluginWrapper(
    dst *byte, dstLen int,
	reqJson *byte, reqJsonLen int,
	respJson *byte, respJsonLen int,
	/* FORMAL PARAMETERS */
) uintptr {
	// 解析请求
	reqJsonSlice := unsafe.Slice(reqJson, reqJsonLen)
	req := new(fuzzTypes.Req)
	if err := json.Unmarshal(reqJsonSlice, req); err != nil {
		return ^uintptr(0)
	}

	// 解析响应
	respJsonSlice := unsafe.Slice(respJson, respJsonLen)
	resp := new(fuzzTypes.Resp)
	if err := json.Unmarshal(respJsonSlice, resp); err != nil {
		return ^uintptr(0)
	}

	// 执行核心逻辑
	reaction := /* FUN_NAME */(req, resp, /* ACTUAL PARAMETERS */)

	// 序列化结果
	reactionJson, err := json.Marshal(reaction)
	if err != nil {
	    return ^uintptr(0)
	}

	// 计算需要的空间
	needed := len(reactionJson)

	// 如果缓冲区不足或为空，直接返回所需长度
	if dst == nil || dstLen < needed {
		return uintptr(needed)
	}

	// 写入结果
	buf := unsafe.Slice(dst, dstLen)
	copy(buf, reactionJson)

	return uintptr(needed)
}

func main() {}
